7.1
Vocabulary
1. exception handler
2. exception

Try ut/Solve it
1. An exception appears
2. An exception handler
3. -The program works
   -Protects the users from errors
   -You save time
4. A. Returns more rows that it is requested; you cand throw an exception called TOO_MANY_ROWS
B. DECLARE 
   v_jobid employees.job_id%TYPE;  
BEGIN 
   SELECT job_id INTO v_jobid 
   FROM employees 
   WHERE department_id = 80; 
EXCEPTION
 WHEN TOO_MANY_ROWS THEN
 DBMS_OUTPUT.PUT_LINE ('Your select statement retrieved
 multiple rows.');
END;
C. It appears the message 'Your select statement retrieved
 multiple rows.'
5. An exception has occurred. We already have a department_id = 50 => primary key is violated
6. For every value, an exception is occured ? for 10 => TOO MANY ROWS, for 20, 30 => NO DATA FOUND
7. DECLARE 
v_employee_id  emp_temp.employee_id%TYPE; 
v_last_name       
emp_temp.last_name%TYPE; 
BEGIN 
SELECT employee_id, last_name INTO v_employee_id, v_last_name 
FROM emp_temp 
WHERE department_id = 10; -- run with values 10, 20, and 30 
DBMS_OUTPUT.PUT_LINE('The SELECT was successful'); 
EXCEPTION
WHEN TOO_MANY_ROWS THEN
 DBMS_OUTPUT.PUT_LINE ('Your select statement retrieved
 multiple rows.');
WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('The departments with id 20 and 30 was deleted');
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('An exception has occurred'); 
END; 
8. -Trap Only Specific Exceptions Where Possible
-Display Meaningful Error Messages
-Avoid Silencing All Exceptions
9. We initialize the number with more digits that it is allowed(2)
10. ERROR: number precision too large
11. An exception has occurred
The number is: 1234
The code attempts to assign the string 'A character string' to v_number, which raises a exception because a NUMBER type cannot hold a string.

7.2
Vocabulary
1. predefined oracle errors
2. non-predefined oracle errors
3. SQLERRM
4. pragma exception init
5. SQLCODE

Try it/Solve it
1. -predefined Oracle 
   -non-predefined Oracle
   -user-defined error
2. -you don't need to declare it + implicit
   -you need to declare it + implicit
   -you need to declare it + explicit
3. A. divisor is equal to zero; you can't divide a number to zero
B. DECLARE
 division_except EXCEPTION;
 pragma exception_init (division_except, -01476);
 v_number NUMBER(6, 2) := 100;
 v_region_id regions.region_id%TYPE;
 v_region_name regions.region_name%TYPE;
BEGIN
 SELECT region_id, region_name INTO v_region_id, v_region_name
 FROM regions
 WHERE region_id = 11; --regiond_id = 1
 DBMS_OUTPUT.PUT_LINE('Region: ' || v_region_id || ' is: ' || v_region_name);
 v_number := v_number / 0;
EXCEPTION
when division_except
then
DBMS_OUTPUT.PUT_LINE ('Division with 0 not possible');
END;

It displays the message 'Division with 0 not possible'
(for region_id = 1 => NO DATA FOUND)

C.  DECLARE
 division_except EXCEPTION;
 pragma exception_init (division_except, -01476);
 v_number NUMBER(6, 2) := 100;
 v_region_id regions.region_id%TYPE;
 v_region_name regions.region_name%TYPE;
BEGIN
 SELECT region_id, region_name INTO v_region_id, v_region_name
 FROM regions
 WHERE region_id = 29;
 DBMS_OUTPUT.PUT_LINE('Region: ' || v_region_id || ' is: ' || v_region_name);
 v_number := v_number / 0;
EXCEPTION
when division_except
then
DBMS_OUTPUT.PUT_LINE ('Division with 0 not possible');
END; 

Region: 29 is: Caribbean
Division with 0 not possible ??

D. 

4. A. invalid cursor - the cursor regions_curs is not opened before the FETCH operation
B.  DECLARE
 cursor_invalid EXCEPTION;
 pragma exception_init (cursor_invalid, -01001); -pragma allows you to associate a predefined Oracle error number (like -01001) with a custom exception
 CURSOR regions_curs IS 
 SELECT * FROM regions
 WHERE region_id < 20
 ORDER BY region_id;
 regions_rec regions_curs%ROWTYPE;
 v_count NUMBER(6);
BEGIN
 LOOP
 FETCH regions_curs INTO regions_rec;
EXIT WHEN regions_curs%NOTFOUND;
 DBMS_OUTPUT.PUT_LINE('Region: ' || regions_rec.region_id
|| ' Name: ' || regions_rec.region_name);
 END LOOP;
 CLOSE regions_curs;
 SELECT COUNT(*) INTO v_count
 FROM regions
 WHERE region_id = 1;
 DBMS_OUTPUT.PUT_LINE('The number of regions is: ' || v_count);
EXCEPTION
when cursor_invalid
then
DBMS_OUTPUT.PUT_LINE ('Cursor invalid');
END;

It diplays the messaje 'Cursor invalid', because the cursor isn t open

C. DECLARE
CURSOR regions_curs IS
SELECT * FROM regions
WHERE region_id < 20
ORDER BY region_id;
regions_rec regions_curs%ROWTYPE;
v_count NUMBER(6);
BEGIN
OPEN regions_curs;
LOOP
FETCH regions_curs INTO regions_rec;
EXIT WHEN regions_curs%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('Region: '|| regions_rec.region_id || ' Name: ' ||
regions_rec.region_name);
END LOOP;
CLOSE regions_curs;
SELECT COUNT(*) INTO v_count
FROM regions
WHERE region_id = 1;
DBMS_OUTPUT.PUT_LINE('The number of regions is: ' || v_count);
EXCEPTION
WHEN INVALID_CURSOR THEN
DBMS_OUTPUT.PUT_LINE('Attempt to fetch from an unopened cursor');
END;

->It counts the number of regions with id = 1 => 0
->The SELECT statement in the cursor retrieves all rows from regions where region_id < 20.
5. DECLARE
v_language_id languages.language_id%TYPE;
v_language_name languages.language_name%TYPE;
BEGIN
SELECT language_id, language_name
INTO v_language_id, v_language_name
FROM languages
WHERE LOWER(language_name) LIKE '<substring%>'; -- for example 'ab%'
INSERT INTO languages(language_id, language_name)
VALUES(80, null);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No rows were found');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('More than one row was found');
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('This language id already exists');
END

B. ba - more than one row was found
   ce - no rows were found 

DECLARE
    v_language_id   languages.language_id%TYPE;
    v_language_name languages.language_name%TYPE;
    e_null_not_allowed EXCEPTION; 
    PRAGMA EXCEPTION_INIT(e_null_not_allowed, -1400);

BEGIN
    SELECT language_id, language_name
    INTO v_language_id, v_language_name
    FROM languages
    WHERE LOWER(language_name) LIKE 'al%'; 

    INSERT INTO languages (language_id, language_name)
    VALUES (80, NULL);

END;

C. DECLARE
    v_language_id   languages.language_id%TYPE;
    v_language_name languages.language_name%TYPE;
    e_null_not_allowed EXCEPTION; 
    PRAGMA EXCEPTION_INIT(e_null_not_allowed, -1400);

BEGIN
    SELECT language_id, language_name
    INTO v_language_id, v_language_name
    FROM languages
    WHERE LOWER(language_name) LIKE 'al%'; 

    INSERT INTO languages (language_id, language_name)
    VALUES (80, NULL);

EXCEPTION
    WHEN e_null_not_allowed THEN
        DBMS_OUTPUT.PUT_LINE('Error: Cannot insert NULL into a NOT NULL column.');
END;

7.3

RAISE_APPLICATION_ERROR-permite asocierea propriului numar de eroare cu un mesaj semnificativ pentru exceptie

Vocabulary
1.RAISE_APPLICATION_ERROR
2.RAISE
3.USER_DEFINED_ERROR

Try it/Solve it
1.
DECLARE
no_rows_updated EXCEPTION;
BEGIN
UPDATE excep_emps
SET salary=10000
WHERE department_id=40;
IF SQL%NOTFOUND THEN 
RAISE no_rows_updated;
END IF;
EXCEPTION
WHEN no_rows_updated THEN
DBMS_OUTPUT.PUT_LINE('Nu exista departamentul.');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(SQLCODE||SQLERRM);
END;

2.
DECLARE
no_rows_updated EXCEPTION;
BEGIN
UPDATE excep_emps
SET salary=10000
WHERE department_id=40;
IF SQL%NOTFOUND THEN 
RAISE no_rows_updated;
END IF;
EXCEPTION
WHEN no_rows_updated THEN
RAISE_APPLICATION_ERROR(-20202,'Nu exista departamentul.');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(SQLCODE||SQLERRM);
END;


3.
DECLARE
no_rows_updated EXCEPTION;
BEGIN
UPDATE excep_emps
SET salary=10000
WHERE department_id=40;
IF SQL%NOTFOUND THEN 
RAISE_APPLICATION_ERROR(-20202,'NU EXISTA DEPARTAMENTUL');
END IF;
END;


4.
a.
There are 0 employees
0 employees were deleted
department_id=40 nu exista

b.
DECLARE
v_dept_id excep_emps.department_id%TYPE;
v_count NUMBER;
e_no_emps_in_dept EXCEPTION;
e_no_rows_deleted EXCEPTION;
BEGIN
v_dept_id := 40;
SELECT COUNT(*) INTO v_count
FROM excep_emps
WHERE department_id = v_dept_id;
IF v_count = 0 THEN
RAISE e_no_emps_in_dept;
END IF;
DBMS_OUTPUT.PUT_LINE('There are ' || v_count || ' employees');
DELETE FROM excep_emps
WHERE department_id = v_dept_id;
IF SQL%NOTFOUND THEN -- or IF SQL%ROWCOUNT = 0 THEN
RAISE e_no_rows_deleted;
END IF;
DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT ||' employees were deleted');
ROLLBACK;
EXCEPTION
WHEN e_no_emps_in_dept THEN
DBMS_OUTPUT.PUT_LINE('Nu sunt angajati.');
WHEN e_no_rows_deleted THEN
DBMS_OUTPUT.PUT_LINE('Nu s-au eliminat angajati.');
END;

c.
 DECLARE
v_dept_id excep_emps.department_id%TYPE;
v_count NUMBER;
e_no_emps_in_dept EXCEPTION;
e_no_rows_deleted EXCEPTION;
BEGIN
v_dept_id := 40;
SELECT COUNT(*) INTO v_count
FROM excep_emps
WHERE department_id = v_dept_id;
IF v_count = 0 THEN
RAISE_APPLICATION_ERROR(-20203,'NU SUNT ANGAJATI');
END IF;
DBMS_OUTPUT.PUT_LINE('There are ' || v_count || ' employees');
DELETE FROM excep_emps
WHERE department_id = v_dept_id;
IF SQL%NOTFOUND THEN
RAISE_APPLICATION_ERROR(-20204,'NU S-A STERS NICIUN ANGAJAT');
END IF;
DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT ||' employees were deleted');
ROLLBACK; 
END;

7.4
Vocabulary
1.Propagation of exceptions
2.Exception scope
3.Exception visibilty
