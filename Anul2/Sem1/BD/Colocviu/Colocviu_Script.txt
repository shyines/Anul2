Drop Table Categorie
Drop Table Reteta
Drop Table Set_Ingrediente
Drop Table Igrediente


Create Table Categorie (
	categ_id NUMBER(4),
	tip VARCHAR(15) CONSTRAINT NOT NULL
);

Create Table Reteta (
	reteta_id NUMBER(4) ,
	nume VARCHAR(14) CONSTRAINT NOT NULL,
	descriere VARCHAR(50),
	categ_id NUMBER(4),
	vegetariana BOOLEAN,
	timp_preparare TIME,
	portii INTEGER
);

Create Table Set_Ingrediente(
	reteta_id NUMBER(4),
	ingred_id NUMBER(4),
	cantitate INTEGER
	um ENUM(’gr’, ’ml’, ’buc’, ’lingură’, ’linguriță’, ’cană’)
);

Create Table Ingredient(
	ingred_id NUMBER(4),
	ingredient VARCHAR(50) CONSTRAINT NOT NULL
);


--ALTER TABLE Categorie
--ADD CONSTRAINT categorie_categ_id_pk PRIMARY KEY (categ_id);

--ALTER TABLE

4.3
a)
select descriere
from reteta
where vegetariana = 'D'
order by timp_preparare desc, nume asc

b)
select ingred_id, nume_ingredient as Nume
from ingredient
where nume_ingredient like '%e%'
order by nume_ingredient asc;

4.4
a)
select Nume as Nume, descriere as Descriere, tip as Tip, cantitate, um
from set_ingrediente s join reteta r on (r.reteta_id = s.reteta_id) join Categorie c on (r.categ_id = c.categ_id) join ingredient i on (s.ingred_id = i.ingred_id)
where i.nume_ingredient = 'Ceapă' and s.cantitate = 500 and s.um = 'gr';

b)
SELECT DISTINCT 
    LEAST(s1.ingred_id, s2.ingred_id) AS ingred_id1,
    GREATEST(s1.ingred_id, s2.ingred_id) AS ingred_id2
FROM 
    Set_Ingrediente s1
JOIN 
    Set_Ingrediente s2
ON 
    s1.reteta_id <> s2.reteta_id  -- Rețete diferite
    AND s1.ingred_id <> s2.ingred_id  -- Ingrediente diferite
    AND s1.cantitate = s2.cantitate  -- Aceeași cantitate
    AND s1.um = s2.um  -- Aceeași unitate de măsură
GROUP BY 
    LEAST(s1.ingred_id, s2.ingred_id), 
    GREATEST(s1.ingred_id, s2.ingred_id);


4.5
a)
SELECT nume, descriere, timp_preparare
FROM Reteta R1
WHERE vegetariana = 'D'
AND NOT EXISTS (
    SELECT 1
    FROM Reteta R2
    WHERE R2.vegetariana = 'D'
    AND R2.timp_preparare > R1.timp_preparare
);


b)

4.6
a)
SELECT categ_id,
       Round(MIN(timp_preparare),0) AS timp_minim,
       Round(AVG(timp_preparare),0) AS timp_mediu,
       Round(MAX(timp_preparare),0) AS timp_maxim
FROM Reteta
GROUP BY categ_id;

b)
SELECT AVG(si.cantitate) AS cantitate_medie_usturoi
FROM Set_Ingrediente si
JOIN Ingredient i ON si.ingred_id = i.ingred_id
JOIN Reteta r ON si.reteta_id = r.reteta_id
WHERE i.nume_ingredient = 'usturoi'
AND r.nume LIKE '%toc%';

4.7
a)
Insert into Reteta (Reteta_id, nume, descriere, categ_id, vegetariana, timp_preparare, portii, autor)
    Values(35, 'Beef Stroganoff', NULL, 5, 'N', 40, 1, 'Matei');


Insert into ingredient (ingred_id, nume_ingredient)
    values (32, 'muschi de vita');

Insert into ingredient (ingred_id, nume_ingredient)
    values (33, 'mustar de Dijon');

declare

begin
insert into Set_ingrediente(reteta_id, ingred_id, cantitate, um)
    values ((Select reteta_id
            from Reteta
            where nume = 'Beef Stroganoff'),

            (Select ingred_id
            from ingredient
            where nume_ingredient = 'muschi de vita'),

            500, 'gr');

insert into Set_ingrediente(reteta_id, ingred_id, cantitate, um)
    values ((Select reteta_id
            from Reteta
            where nume = 'Beef Stroganoff'),

            (Select ingred_id
            from ingredient
            where nume_ingredient = 'mustar de Dijon'),

            1, 'lingura');
insert into Set_ingrediente(reteta_id, ingred_id, cantitate, um)
    values ((Select reteta_id
            from Reteta
            where nume = 'Beef Stroganoff'),

            (Select ingred_id
            from ingredient
            where nume_ingredient = 'Smântână'),

            250, 'ml');
end;

b)
DECLARE
    CURSOR cur IS
        SELECT categ_id, tip
        FROM Categorie
        WHERE NOT EXISTS (
            SELECT 1
            FROM Reteta
            WHERE Reteta.categ_id = Categorie.categ_id
        );
BEGIN
    FOR cat IN cur LOOP
        DBMS_OUTPUT.PUT_LINE('Se va șterge categoria: ' || cat.tip);
    END LOOP;

    -- Ștergerea propriu-zisă
    DELETE FROM Categorie
    WHERE NOT EXISTS (
        SELECT 1
        FROM Reteta
        WHERE Reteta.categ_id = Categorie.categ_id
    );

    COMMIT;
END;

c)
DECLARE
    CURSOR cur_set_ingrediente IS
        SELECT reteta_id, ingred_id, cantitate
        FROM set_ingrediente
        WHERE um = 'lingurita'
        FOR UPDATE NOWAIT;
BEGIN
    FOR cat IN cur_set_ingrediente LOOP
        UPDATE set_ingrediente
        SET cantitate = cantitate / 2,
            um = 'lingura'
        WHERE reteta_id = cat.reteta_id
        AND ingred_id = cat.ingred_id;
    END LOOP;

    COMMIT;
END;


4.8

CREATE TABLE Exceptii AS
SELECT Reteta.*, CAST(NULL AS VARCHAR2(100)) AS natura_exceptiei
FROM Reteta
WHERE 1 = 0;


CREATE OR REPLACE PROCEDURE Inserare_Exceptii AS
BEGIN
    -- Condiția 1: Supe fără apă
    INSERT INTO Exceptii
    SELECT r.*, 'Supă fără apă' AS natura_exceptiei
    FROM Reteta r
    WHERE r.categ_id = (SELECT categ_id FROM Categorie WHERE categ_id = 3)
    AND NOT EXISTS (
        SELECT 1
        FROM Set_Ingrediente si
        JOIN Ingredient i ON si.ingred_id = i.ingred_id
        WHERE si.reteta_id = r.reteta_id AND LOWER(i.nume_ingredient) = 'apă'
    );

    -- Condiția 2: Rețetă vegetariană cu carne
    INSERT INTO Exceptii
    SELECT r.*, 'Rețetă vegetariană cu carne' AS natura_exceptiei
    FROM Reteta r
    WHERE r.vegetariana = 'D'
    AND EXISTS (
        SELECT 1
        FROM Set_Ingrediente si
        JOIN Ingredient i ON si.ingred_id = i.ingred_id
        WHERE si.reteta_id = r.reteta_id AND LOWER(i.nume_ingredient) = 'carne'
    );

    -- Confirmă tranzacția
    COMMIT;
END Inserare_Exceptii;

BEGIN
    Inserare_Exceptii;
END;
	