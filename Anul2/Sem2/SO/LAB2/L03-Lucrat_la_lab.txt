
SO-L03p1

/**
Generate all the subsets of the set {0, 1, 2, ..., N-1}
using as little memory as possible. How many subsets are there?

Example: for N=3, the program will output:
"{}, {0 }, {1 }, {0 1 }, {2 }, {0 2 }, {1 2 }, {0 1 2 }, 
Exista 8 submultimi"
*/

/**
Sa se genereze toate submultimile multimii {0, 1, 2, ..., N-1}
folosind cat mai putina memorie. Cate submultimi exista?

Exemplu: pentru N=3, programul va afisa:
"{}, {0 }, {1 }, {0 1 }, {2 }, {0 2 }, {1 2 }, {0 1 2 }, 
Exista 8 submultimi"
*/

#include <stdio.h>
#include <stdlib.h>

#define ISBITSET(number, POS) ((number)&(1 << POS))

int generateSets(int largest_num)
{
    int i, j;
    int maxLoop;

    maxLoop = 1 << largest_num;

    for (i = 0; i < maxLoop; i++) {
        printf("{");
        for (j = 0; j < largest_num; j++){
            if (ISBITSET(i, j) != 0){
                printf("%d ", j);
            }
        }
        printf("}, ");
    }
    return maxLoop; 
}

int main(int argc, char **argv)
{
    int largest_num;
    int res;

    if(2 != argc){
        printf("USAGE: %s number\n", argv[0]);
        exit(-1);
    }

    sscanf(argv[1], "%d", &largest_num);
    res = generateSets(largest_num);
    printf("\nExista %d submultimi\n", res);
    
    return 0;
}


L03P2

/**
Read two sets from the keyboard. The first two numbers provided
will be the number of elements within each set. Next,
you will provide the elements from each set.
Compute |intersection(set1, set2)| / |union(set1, set2)|.
|X| is the number of elements within the set X.
*/

/**
Se citesc doua multimi de la tastatura. Primele doua numere 
introduse vor fi dimensiunile celor doua multimi. Mai departe
se vor introduce elementele fiecarei multimi.
Calculati |intersection(set1, set2)| / |union(set1, set2)|.
|X| reprezinta numarul de elemente din multimea X.
*/

#include <stdio.h>

#define SUCCESS 0
#define ERROR_READ 1

int read_sets(int *set1, int *set2, int *size1, int *size2)
{
    int i, sz1, sz2;
    *size1 = 0;
    *size2 = 0;
    
    if(scanf("%d", &sz1) != 1) {
        printf("Error reading size 1!\n");
        return ERROR_READ;
    }
    if(scanf("%d", &sz2) != 1) {
        printf("Error reading size 2!\n");
        return ERROR_READ;
    }
    for(i = 0; i < sz1; i++) {
        if (scanf("%d", &set1[i]) != 1) {
            printf("Error reading element %d from set 1\n", i);
            return ERROR_READ;
        }
    }
    for(i = 0; i < sz2; i++) {
        if (scanf("%d", &set2[i]) != 1) {
            printf("Error reading element %d from set 2\n", i);
            return ERROR_READ;
        }    
    }
    *size1 = sz1;
    *size2 = sz2;
    return SUCCESS;
}

float compute(int *set1, int *set2, int size1, int size2)
{
    int i = 0, j = 0, common = 0;
    while(i < size1 && j < size2) {
        if(set1[i] == set2[j]) {
            i++;
            j++;
            common++;
        } else if (set1[i] < set2[j]) {
            i++;
        } else {
            j++;
        }
    }
    return 1.0 * common / (size1 + size2 - common);
}

void printset(int size, int *set)
{
    for(int i=0;i<size;i++)
        printf("%d ",set[i]);
    printf("\n");

}

int main(int argc, char **argv)
{
    int set1[150], set2[150], size1, size2, res;
    res = read_sets(set1, set2, &size1, &size2);
    
    printset(size1,set1);
    printset(size2,set2);
    
    if(res != SUCCESS) {
        return res;
    }
    printf("result is %.2f!\n", compute(set1, set2, size1, size2));
    return SUCCESS;
}


L03P3

/**
Read an integer array from  the keyboard. Compute the sum of the prime numbers from the array.
Example: for the array [2,62,7,4,45,1] the program will display the value 10.
*/

/**
Sa se citeaca un sir de numere de la tastatura. Sa se calculeze suma numerelor prime din sir.
Exemplu: pentru sirul [2,62,7,4,45,1], programul va afisa valoarea 10.
*/

#include <stdio.h>
#include <stdlib.h>

#define TRUE 1
#define FALSE 0

int isPrime(int number)
{
    int i;

    for(i=2;i <= number/2;i++) {
        if(number%i==0) {
            return FALSE;
        }
    }
    return TRUE;
}

void computeSum(int *array, int size, int *sum)
{
    int i, tempSum = 0;


    for(i=0;i<size;i++) {
        if(isPrime(array[i])==TRUE) {
            tempSum += array[i];
        }
    }

     *sum = tempSum;
}


int readArray(int *size, int *array)
{
    int i, sz;

    printf("Size: \n");
    if(scanf("%d", &sz) != 1) { 
        printf("Error reading size!\n");
        return FALSE;
    }

    printf("Array:\n");
    for(i=0;i<sz;i++) {
        if(scanf("%d", &array[i]) != 1) {
            printf("Error reading element %d!\n",i);
            return  FALSE;
        }
    }

    *size = sz;
    return TRUE;
}

int main()
{
    int sum,size;
    int *array;

    array = (int *)malloc(sizeof(int)*150);

    if(readArray(&size, array)==TRUE) {
        computeSum(array,size, &sum);
        printf("%d", sum);
    }

    return 0;
}